// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/**
 * =========================
 * EXISTENTE (no tocar)
 * =========================
 */

enum MessageRole {
  user
  assistant
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String?
  messages  Message[]

  // Relaciones nuevas
  carts     Cart[]
  sales     Sale[]
}

model Message {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String      @db.ObjectId
  chat      Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)
  role      MessageRole
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

/**
 * =========================
 * Mini-Ayolin Ventas (Carrito completo)
 * =========================
 */

enum SaleStatus {
  pending_payment
  paid
  cancelled
}

enum CartStatus {
  open
  locked
}

model Chatbot {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerUserId   String
  name          String
  salesEnabled  Boolean  @default(true)
  salesPassHash String?

  // === CONFIG VENTAS/ENVÍO ===
  paymentMethods  String[] @default([])
  shippingMethods String[] @default([])
  shippingConfig  Json?
  // Opcional: datos para instrucciones de pago (CLABE, beneficiario, etc.)
  paymentConfig   Json?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relaciones
  products        Product[]
  sales           Sale[]
  inventoryLedger InventoryLedger[]
  catalogs        CatalogFile[]
  carts           Cart[]

  @@index([ownerUserId])
}

model CatalogFile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatbotId String   @db.ObjectId
  bot       Chatbot  @relation(fields: [chatbotId], references: [id])
  filename  String
  mimeType  String
  text      String?
  createdAt DateTime @default(now())

  @@index([chatbotId, createdAt])
}

model Product {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  chatbotId String  @db.ObjectId
  bot       Chatbot @relation(fields: [chatbotId], references: [id])

  sku         String
  name        String
  description String?
  priceCents  Int
  stock       Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  saleItems        SaleItem[]           @relation("SaleItemProduct")
  inventoryLedger  InventoryLedger[]    @relation("ProductInventoryLedger")
  cartItems        CartItem[]

  @@unique([chatbotId, sku])
  @@index([chatbotId, name])
}

/**
 * Carrito anclado al chat.
 * No usamos unique parcial (Prisma/Mongo no soporta parcial); garantizamos 1 "open" por chat en lógica.
 */
model Cart {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  chatbotId     String   @db.ObjectId
  bot           Chatbot  @relation(fields: [chatbotId], references: [id])
  chatId        String   @db.ObjectId
  chat          Chat     @relation(fields: [chatId], references: [id])
  status        CartStatus @default(open)
  subtotalCents Int      @default(0)

  // Datos de checkout recogidos
  paymentMethod  String?
  shippingMethod String?
  shippingAddress String?
  contactName    String?
  contactPhone   String?
  notes          String?

  items     CartItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatbotId, chatId, status])
  @@index([chatId, status])
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  sku                 String
  nameSnapshot        String
  priceCentsSnapshot  Int
  qty                 Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cartId])
}

/**
 * Venta/pedido. Se crea al confirmar.
 * Multi-producto mediante SaleItem[]
 */
model Sale {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  chatbotId     String     @db.ObjectId
  bot           Chatbot    @relation(fields: [chatbotId], references: [id])

  chatId        String     @db.ObjectId
  chat          Chat       @relation(fields: [chatId], references: [id])

  status        SaleStatus @default(pending_payment)
  totalCents    Int
  paymentMethod String?
  shippingMethod String?
  shippingAddress String?
  shippingDetails Json?
  customerName  String?
  customerPhone String?
  notes         String?

  // Idempotencia opcional
  idempotencyKey String?

  items      SaleItem[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([chatbotId, status, createdAt])
  @@index([chatId, createdAt])
  @@index([idempotencyKey])
}

model SaleItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  saleId    String   @db.ObjectId
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  productId String?  @db.ObjectId
  product   Product? @relation(name: "SaleItemProduct", fields: [productId], references: [id])

  sku                 String
  nameSnapshot        String
  priceCentsSnapshot  Int
  qty                 Int

  createdAt DateTime @default(now())
}

model InventoryLedger {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  chatbotId String  @db.ObjectId
  bot       Chatbot @relation(fields: [chatbotId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(name: "ProductInventoryLedger", fields: [productId], references: [id])

  delta     Int
  reason    String
  ref       String?
  createdAt DateTime @default(now())

  @@index([chatbotId, productId, createdAt])
}
